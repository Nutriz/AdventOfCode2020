import org.junit.jupiter.api.Nested
import java.math.BigInteger
import kotlin.test.Test
import kotlin.test.assertEquals

fun String.isTreeAt(x: Int) = infiniteLength(x) == '#'

fun String.infiniteLength(realIndex: Int): Char = this[realIndex % length]

fun List<String>.countTreesWithSteps(stepX: Int, stepY: Int): Int {
    var sum = 0
    for (y in 0 until size step stepY) {
        sum += if (this[y].isTreeAt(y/stepY * stepX)) 1 else 0
    }
    return sum
}

class Day3 {

    @Test
    fun `simulate infinite line`() {
        val line = exampleInput.lines().first()
        val lineLength = line.length // 66

        assertEquals(line[0], line.infiniteLength(lineLength))
        assertEquals(line[0], line.infiniteLength(lineLength * 2))

        assertEquals(line[1], line.infiniteLength(lineLength + 1))
        assertEquals(line[1], line.infiniteLength(lineLength * 2 + 1))

        assertEquals(line[2], line.infiniteLength(lineLength + 2))
        assertEquals(line[2], line.infiniteLength(lineLength * 2 + 2))

        line.forEachIndexed { i, c ->
            assertEquals(c, line.infiniteLength(i + lineLength))
            assertEquals(c, line.infiniteLength(i + lineLength * 2))
        }
    }

    @Test
    fun `check char after toboggan moved right 3, down 1`() {
        assertEquals('.', exampleInput.lines()[0][0])
        assertEquals('.', exampleInput.lines()[1][3])
        assertEquals('#', exampleInput.lines()[2][6])
        assertEquals('.', exampleInput.lines()[3][9])
        assertEquals('#', exampleInput.lines()[4][12])
    }

    @Test
    fun `check is tree at`() {
        assert(exampleInput.lines()[2].isTreeAt(6))
        assert(exampleInput.lines()[4].isTreeAt(12))
    }

    //Right 3, down 1.
    @Nested
    inner class PartA {

        @Nested
        inner class `Example data` {

            @Test
            @Deprecated("Better solution below")
            fun `count trees encountered`() {
                var sum = 0
                exampleInput.lines().forEachIndexed { i, line ->
                    sum += if (line.isTreeAt(i * 3)) 1 else 0
                }
                assertEquals(7, sum)
            }

            @Test
            fun `v2 count trees encountered`() {
                val trees = exampleInput.lines().countTreesWithSteps(stepX = 3, stepY = 1)
                assertEquals(7, trees)
            }
        }

        @Nested
        inner class `Real data` {

            @Test
            @Deprecated("Better solution below")
            fun `count trees encountered`() {
                var sum = 0
                realInput.lines().forEachIndexed { i, line ->
                    sum += if (line.isTreeAt(i * 3)) 1 else 0
                }
                println("Result part A: $sum")
            }

            @Test
            fun `v2 count trees encountered`() {
                val trees = realInput.lines().countTreesWithSteps(stepX = 3, stepY = 1)
                println("Result part A: $trees")
            }
        }
    }

//Right 1, down 1.
//Right 3, down 1. (This is the slope you already checked.)
//Right 5, down 1.
//Right 7, down 1.
//Right 1, down 2.
    @Nested
    inner class PartB {

        @Nested
        inner class `Example data` {

            @Test
            fun `v2 count trees encountered`() {
                val lines = exampleInput.lines()
                val sum1 = lines.countTreesWithSteps(stepX = 1, stepY = 1).toBigInteger()
                val sum2 = lines.countTreesWithSteps(stepX = 3, stepY = 1).toBigInteger()
                val sum3 = lines.countTreesWithSteps(stepX = 5, stepY = 1).toBigInteger()
                val sum4 = lines.countTreesWithSteps(stepX = 7, stepY = 1).toBigInteger()
                val sum5 = lines.countTreesWithSteps(stepX = 1, stepY = 2).toBigInteger()

                val result = sum1 * sum2 * sum3 * sum4 * sum5
                assertEquals(BigInteger("336"), result)
            }
        }

        @Nested
        inner class `Real data` {

            @Test
            fun `v2 count trees encountered`() {
                val lines = realInput.lines()
                val sum1 = lines.countTreesWithSteps(stepX = 1, stepY = 1).toBigInteger()
                val sum2 = lines.countTreesWithSteps(stepX = 3, stepY = 1).toBigInteger()
                val sum3 = lines.countTreesWithSteps(stepX = 5, stepY = 1).toBigInteger()
                val sum4 = lines.countTreesWithSteps(stepX = 7, stepY = 1).toBigInteger()
                val sum5 = lines.countTreesWithSteps(stepX = 1, stepY = 2).toBigInteger()

                val result = sum1 * sum2 * sum3 * sum4 * sum5
                println("part B: $result")
            }
        }
    }

/**
     * In this example, traversing the map using this slope would cause you to encounter 7 trees.
     */
    val exampleInput =
"""..##.........##.........##.........##.........##.........##.......
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#"""

    val realInput =
""".##.....#....#....#..#.#...#.##
.###........#.##....#......#..#
#..#..#.....#...#....#.#.......
.........#.................#...
..#.......#.#.......#.......#.#
.####........#.#..##.........#.
........#.........#.........#..
#..##...##....#.....##......#..
.........#..............#......
#.........#...##.........#.#...
..............#........##.....#
##....#...........#....#.#...#.
.....#..#.....#...#.#..........
#.......#...#..##........##..#.
.#........#.......#............
.......##.....#.#.#..#.#.......
..#......#..#....##......#.#...
.....##....#..#.....#..#.......
.............#.......#.#....#..
.................#.#......#....
.#..#....#..........#.....#.##.
#.#.#.#.....###.......#.....#..
#...#..........#..#............
...#...##.......#.##..#........
..#...#.#.##...##.........#.#.#
.....#...#.#....#.#.....#......
...#...#.#..#...#.....#........
...........###.#.......#.#.....
..#..#.#........#.#.......#.#.#
.#.......#...........#.........
.#..#...##....#.......###..##..
#....#.....#....##..#.........#
#..#.......#...#......#.#....#.
......##..#..#....#.#........##
#.....#.........#......#..##..#
.#..#.......#....#............#
....#..........#.#...##....#.##
..#...#.#...#.###.#..#......#..
#.#...#..............#.......#.
..##.......#......#....###.....
......#.......#.#.##.#..##.#...
.#......#......#.#....#..#.#..#
....#....#..#...#.....#.#..#...
.#.....#.#.#..#........#.#.###.
#..#..#.#......#..#..#....#.#..
..#.###....#....##...#.........
...........#..#...........#....
.................#..........#.#
.#.#....#..#........#..#.......
...........##..#...............
...#.##.........#.........#.#.#
........#..#....#.#............
...##...##..................#.#
...#..##..#...#......#.....#..#
.##.#..#..#......#......#.....#
....#.....#....#......##.#.....
.....#.##....#...#.............
......#...#.....##....#...#..##
...#............#.###....##....
............#.#.#...#.#........
#.....#..#.#..##...........#.##
.....#.#.#.#..##......##.#..#..
.#.##..#.........#......#.....#
.#.#.#.#.#..#..#........###....
......##..........#.#.....##..#
..#...#..#.....#.#.....#.......
............#....#.............
........#...#..#....#.#..###...
#........##....##..............
.........#.#.#..#..#...#.#.....
....#............#....####...#.
##.#.#......#.....#...#....###.
...#..#..#..#.......#..#.#.#..#
..#..#....#...#.##..#.........#
#..#.#....#....#...#..##..#.#..
...#....#.............#..#.#..#
..#......#.##...#..............
#....##.#.#...##......#.....##.
.#...##...#...####.....##......
...........#.###....#...#...#..
##..#..##..#..#.#.#..###.......
.#...##......#........##..#....
.#...#...#.....#............#..
.#.#.#...#.#..#.......#......#.
.................#..#.#......#.
#..#####......##.#....#...#....
........#......#.....##......#.
....#.#...#...#..#.......#####.
.....##......#...#.......#....#
.#....#...#..#...#.#...#..#...#
....##.........#.#...####.#....
...##..........#.#.......##....
.........#......#.....#....#...
#....##..#......#.....##....#..
...#.#.............#...#.....#.
...........#...#.#....#..#.#...
.......#.#.#.....#..#........#.
..##.....#..#.....##..#........
...#.#..........#...#....#.#...
..#....#......#...#.#...##..#.#
.#...#..#..#..#.......#........
.................#.#...........
...............#......##.....#.
..##.....###..#....#.........##
....#.#........#.####.#...#....
.....#.....##..####..##.......#
.....####.#...#......#.........
........#..#......#.....##.....
...###..#.#..###.......#.......
...#...##..#..#..#..#.##.......
..#......##..#.....##..##......
#.......#.#..#.................
#.......#...#..###....#.#.#.#..
#...#.#....##.##.#...........#.
.#.........#..###..#.........#.
#...#......#...#.#.........#...
.#.##..............#.#....#...#
........#.....#..#.#.#......#..
............####.#......#......
......#.#.#...#.#...#.#.....#..
....#....#...#.....#.......#.#.
..#....#....###..#....#.....##.
.................#.....#.#....#
.#.............#......#.##..#..
#.....##.......#..#.....#....#.
#.#......####...##.....#....##.
.....#.#....#..................
....#....#..#.#...........##...
...#.............##......#..#..
......#..........#...#...##.###
...##......##.....#......#....#
........#.#.#...#...#..##......
......................###....##
.#.....#..#..#.##.#.#.#....#.##
.#..............#.....#......#.
.#...#.##....#.....#.#.#..#..#.
##...##.......#.....#..###.....
...#..#.#....#........#........
....#..............##...#......
...........#..#.....##.#.#.#...
#.#.....##..##.#.#........#....
.........#....#.....#..##.#...#
...#...#..#..#.####...#.......#
.....##.....##.....#......#....
#.##...#....#............#..##.
.#.##..#...#....#.#......#.....
..###................#.........
.#..#..#................#......
....#..#........#..#....#......
.#..........###......#...###...
...........##...#.#..#.........
...#....#..........#.....#..##.
..#..#.............#......###..
#....#....##.....#....#.##.....
......#.......#..#..........##.
#..##.#...#.#.........#....#.#.
...#...#..........#...#..#....#
...###..#.#......#.##.#####...#
..#.....#.#..............#..##.
#..###......#.#..#........#....
.#.......#.......#.....#.##....
.#...##..#.......##.....#....##
..........#.#..#.....#.........
.......####...#...#.....##.....
......#.......#.......#..#.#...
...##....##.#.......#.##......#
.#...#............#......##....
#..#..#...#.#........#.........
.......#.......#.....##.#......
.#....##...#....#.........#...#
#.#....#.....##...........#..#.
.....#......#....#......#.#...#
.#............#...#.#....#....#
........##..#..##..##.##....#..
........................#.#....
#....#...#.....................
##.#.............#.....#...##.#
....##....###.......#..........
..#.#..#.#...####.....#.....#..
#.........#.......#......#..##.
.#.#.............#..#...#...#..
#..#....#....#..##.........#...
#.#.....#.##.#...#.##..#.#..##.
......#......#.###....#..###...
.##...#.......#.........#.#...#
..........#...#....#..#....#...
.....#...#.....#....##....#.#..
#....#...........#.#...#.......
.###..#........##..........#...
....###.##..#...#.#..##......##
.#...#...........#...........#.
#......#....#.##.........##..#.
.#.......#........#......#.#.#.
.......#..##.........#......#..
.#..#.....##....##....#.....#..
#.#.#.....#...#......#.........
..............#.#.........#.#..
....#...#.............#.#......
..##.#............#.#.##....#..
.....####..........#.#....##..#
......#.#.........#.......###..
#....##.#...#.#...........#...#
.....#...#......#....###...#..#
#....#..............#...#......
...#..###...#..........#....#..
#......#..#.#.#......#..#...#..
................##......#..#...
....#..#..#........##..#...#...
...##.......#.##.#.....##...#.#
.......#.##.#..#.....#...#.....
......#........#..#......##.##.
....................#.....#.#..
.##....#...#...##...#.........#
..#...#..#.##..#.#.#......#....
#....###.#..#..#...#..#...##...
#.......#.....#.#.......###.#.#
.#.##...##..#......#....#...#..
#.....#.......##..#....#.......
...###...#............#....#..#
.#....#.#...#..#..#.##.#.#.#...
#......#.#..#.#.#......#.......
..#..#....###.#........#..#.#..
.......#......##.........#.....
...#...###..#..#.##.#..##......
.#.......##.......#..#..#.###.#
.###.#..#.###...........#......
...#................#.#...##..#
....#.###....#.......#........#
.##...#...#..#.....#...#.......
.#...#..#...........#.#......##
...##..#.#.#..#.#.#.......#....
.#.#..#..#.#...........#.......
..#....#.#.#.#.#..............#
..##..............##....#.#..#.
..#....#...##.....###.....#.#.#
#....#......#..........##......
.##.#.#......#...##..###..#....
.#...........#.##.......##..##.
###.....##...#.##..#...........
...#.....#...........#..#.....#
#.........#....#.......#.......
.#.#...#.###....#..#...........
.....#.......#.....#.##.#.#.#..
..##.#.........##.........#..#.
.......#....#......#.........##
...##.....#..#.......#..#.#....
..#...###.......#..#....###....
.......#...###......#.#.....#.#
#....#...#.#....#.#..........#.
........#..#.....#.#.#.........
......##.......###.......#...#.
.........#..#..#.......#.......
#.......#...#.....#.#..#....#..
.##....#..###.............#....
#.#...#.......#.....##.#.#....#
....#....##.#........##........
...##...#.#.............#...##.
##....#.....#..#..#......#.....
#...#.#........##....##......##
..#...........#..#......###....
..##..#.....#......#....##.....
....###.#...#......##......#...
....#....###...........###.#..#
..#....#...#.##....#...#.......
....##...........#............#
..#.#......#......#.##.#...#..#
#.###.............#.#.##.#.....
#....##....#..#.#.#...........#
...#...................#.......
.#...#......#.......#.#....#..#
....#...#..#..#..#.#.....#....#
..#....#............#..###..##.
...##...#...........#..#..#.#..
..#..#..#.........#.........#.#
...#.#.....#.#..##.........#...
....#..........................
....#.....#.#...#.###.........#
....#.#.......#..#.#.#...#...#.
.....#...#..#.....##....#.#.#..
#....###......#..#..........#..
.#.....#......##.......#...#.##
...#..#.....#.#.....#.......##.
............#..#....#...#..#.#.
..........#.#..#..##...........
.......#.......#..##...##.....#
....#...##.#..#...#.#.......#..
....#.#........#...####...#....
#.#.............#.............#
.#.#......#....#..#..#.....##.#
#..#...........#........#.....#
#....#....#.#..#.#....#.#...##.
....##...##...#...#...........#
...#.#..#....#..#..#..#........
...#..##..#........#..........#
#......#.##..##.......#..#.....
..#...#......#...##.#..........
.###.#..#..#........####...#...
#..............#.#.#........#..
..##....#.......#....##...#..##
.##...#..#.#.....#..#.......##.
..#.........##.......#....#..#.
.#..#...#..##.#..#.....#.......
.#....#.........#..#...#...##..
..###..######..#.##.#....#.....
....#..#.....#.............#..#
...#....#.......#..#.#.......##
.....#......#.......#..##...#..
.##..#....##..##......#...#..#.
......#......#...#...###.......
....#.....#.###..##.....#.#.##.
.......#....#...#..#..#...#.#..
...####.#...#...#.#...##....#..
......#.#....#....#.#....##....
#..##...........####....##.#...
...#...##.#.......#.#..........
..#......#..#..#...#......#....
..###..#.....#..#.#.......#...#
#........#...##..#...#....#....
...#.#...#.....#........#...#..
...#....#.###...#..#...#..##.#.
.....#..#..#...#...#..#........
..#......##...............#.#.#
.#...###.#....##..........#.#.."""
}